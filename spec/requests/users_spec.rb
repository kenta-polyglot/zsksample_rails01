require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/users', type: :request do
  # User. As you add validations to User, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    skip('Add a hash of attributes valid for your model')
  end

  let(:invalid_attributes) do
    skip('Add a hash of attributes invalid for your model')
  end

  describe 'GET /index' do
    # ダミーデータ作成（factories/user.rb）
    before do
      FactoryBot.create :test1
    end
    # リクエストが成功すること
    it 'renders a successful response' do
      get users_url
      expect(response).to be_successful
    end
    # ダミーデータが表示されること
    it 'username index' do
      get users_url
      expect(response.body).to include "test1"
    end
  end

  describe 'GET /show' do
    let(:test1) { FactoryBot.create :test1 }
    it 'renders a successful response' do
      get user_url(test1)
      expect(response).to be_successful
    end

    # ダミーデータが表示されること
    it 'user show' do
      get user_url(test1)
      expect(response.body).to include 'test1'
    end
  end

  describe 'GET /new' do
    # リクエストが成功すること
    it 'renders a successful response' do
      get new_user_url
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    let(:test1) { FactoryBot.create :test1 }
    # リクエストが成功すること
    it 'render a successful response' do
      get edit_user_url(test1)
      expect(response).to be_successful
    end
    # ユーザ名が表示されること
    it 'username edit' do
      get edit_user_url(test1)
      expect(response.body).to include 'test1'
    end
  end

  describe 'POST /create' do
      # ユーザが新規作成されること
      it 'creates a new User' do
        expect do
        post users_url, params: { user: FactoryBot.attributes_for(:user) }
        end.to change(User, :count).by(1)
      end
      # リダイレクトすること
      it 'redirects to the created user' do
        post users_url, params: { user: FactoryBot.attributes_for(:user) }
        expect(response).to redirect_to(user_url(User.last))
      end
    end

  describe 'PATCH /update' do
    let(:test1) { FactoryBot.create :test1 }
      # リクエストが成功すること
      it 'request to update user' do
        patch user_url(test1), params: { user: FactoryBot.attributes_for(:user) }
        test1.reload
      end
      # ユーザ名が更新されること
      it 'update username' do
        expect do
          patch user_url(test1), params: { user: FactoryBot.attributes_for(:user) }
        end.to change { User.find(test1.id).name }.from('test1').to('test')
      end
      # リダイレクトすること
      it 'redirects to the user' do
        patch user_url(test1), params: { user: FactoryBot.attributes_for(:user) }
        expect(response).to redirect_to User.last
      end
    end

  describe 'DELETE /destroy' do
    let!(:test1) { FactoryBot.create :test1 }
    # ユーザが削除されること
    it 'destroy user' do
      expect do
        delete user_url test1
      end.to change(User, :count).by(-1)
    end
    # リダイレクトすること
    it 'redirects to the users list' do
      delete user_url test1
      expect(response).to redirect_to(users_url)
    end
  end
end
